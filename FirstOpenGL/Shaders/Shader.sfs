#version 330 core
out vec4 FragColor;

in vec3 Normal;
in vec3 FragPos;

uniform vec3 objectColor;
uniform vec3 lightColor;
uniform vec3 lightPos;  
uniform vec3 viewPos;


void main()
{
    //converting to view space

    //ambient
    float ambientStrength = 0.2;
    vec3 ambient = ambientStrength * lightColor;
    
    //diffuse
    float diffuseStrength = 1.0;
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0); // if result is under 0, return 0
    vec3 diffuse = diffuseStrength * diff * lightColor;
    
    //speculate
    float specularStrength = 0.5;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm); // reflect() expects the lightDir to be from light TO Frag, ours is the opposite, there negate
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), pow(2,2));
    vec3 specular = specularStrength * spec * lightColor;  
    
    vec3 result = (diffuse + ambient + specular) * objectColor;
    
    FragColor = vec4(result, 1.0);
}